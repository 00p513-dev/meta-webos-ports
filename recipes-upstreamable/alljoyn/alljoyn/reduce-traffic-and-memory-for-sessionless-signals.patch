diff --git alljoyn-3.4.3-src-org/alljoyn_core/daemon/AllJoynObj.cc alljoyn-3.4.3-src-patch/alljoyn_core/daemon/AllJoynObj.cc
index 2b7425d..7e791aa 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/daemon/AllJoynObj.cc
+++ alljoyn-3.4.3-src-patch/alljoyn_core/daemon/AllJoynObj.cc
@@ -1484,6 +1484,11 @@ qcc::ThreadReturn STDCALL AllJoynObj::JoinSessionThread::RunAttach()
                 tempEp = ajObj.router.FindEndpoint(srcB2BStr);
                 srcB2BEp = RemoteEndpoint::cast(tempEp);
                 if (srcB2BEp->IsValid() && srcEp->IsValid()) {
+                    uint32_t protoVer = srcB2BEp->GetFeatures().protocolVersion;
+                    if (protoVer < 9) {
+                        srcB2BEp->GetFeatures().nameTransfer = sme.opts.nameTransfer;
+                    }
+
                     /* Store ep for raw sessions (for future close and fd extract) */
                     if (optsOut.traffic != SessionOpts::TRAFFIC_MESSAGES) {
                         SessionMapEntry* smEntry = ajObj.SessionMapFind(sme.endpointName, sme.id);
@@ -3121,7 +3126,7 @@ void AllJoynObj::RemoveBusToBusEndpoint(RemoteEndpoint& endpoint)
             map<qcc::StringMapKey, RemoteEndpoint>::iterator it2 = b2bEndpoints.begin();
             const qcc::GUID128& otherSideGuid = endpoint->GetRemoteGUID();
             while ((it2 != b2bEndpoints.end()) && (it != virtualEndpoints.end())) {
-                if ((it2->second != endpoint) && (it2->second->GetRemoteGUID() != otherSideGuid)) {
+                if ((it2->second != endpoint) && (it2->second->GetRemoteGUID() != otherSideGuid) && (it2->second->GetFeatures().nameTransfer == SessionOpts::ALL_NAMES)) {
                     Message sigMsg(bus);
                     MsgArg args[3];
                     args[0].Set("s", exitingEpName.c_str());
@@ -3193,11 +3198,14 @@ QStatus AllJoynObj::ExchangeNames(RemoteEndpoint& endpoint)
     MsgArg* entries = new MsgArg[names.size()];
     size_t numEntries = 0;
     vector<pair<qcc::String, vector<qcc::String> > >::const_iterator it = names.begin();
+    LocalEndpoint localEndpoint = bus.GetInternal().GetLocalEndpoint();
 
     /* Send all endpoint info except for endpoints related to destination */
     while (it != names.end()) {
         BusEndpoint ep = router.FindEndpoint(it->first);
-        if ((ep->IsValid() && ((ep->GetEndpointType() != ENDPOINT_TYPE_VIRTUAL) || VirtualEndpoint::cast(ep)->CanRouteWithout(endpoint->GetRemoteGUID())))) {
+        bool isLocalDaemonInfo = (it->first == localEndpoint->GetUniqueName());
+
+        if ((ep->IsValid() && ((endpoint->GetFeatures().nameTransfer == SessionOpts::ALL_NAMES) || isLocalDaemonInfo) && ((ep->GetEndpointType() != ENDPOINT_TYPE_VIRTUAL) || VirtualEndpoint::cast(ep)->CanRouteWithout(endpoint->GetRemoteGUID())))) {
             MsgArg* aliasNames = new MsgArg[it->second.size()];
             vector<qcc::String>::const_iterator ait = it->second.begin();
             size_t numAliases = 0;
@@ -3268,10 +3276,12 @@ void AllJoynObj::ExchangeNamesSignalHandler(const InterfaceDescription::Member*
      * and doing it in the opposite order invites deadlock
      */
     AcquireLocks();
+
     map<qcc::StringMapKey, RemoteEndpoint>::iterator bit = b2bEndpoints.find(msg->GetRcvEndpointName());
     const size_t numItems = args[0].v_array.GetNumElements();
     if (bit != b2bEndpoints.end()) {
         qcc::GUID128 otherGuid = bit->second->GetRemoteGUID();
+
         bit = b2bEndpoints.begin();
         while (bit != b2bEndpoints.end()) {
             if (bit->second->GetRemoteGUID() == otherGuid) {
@@ -3279,6 +3289,10 @@ void AllJoynObj::ExchangeNamesSignalHandler(const InterfaceDescription::Member*
                 for (size_t i = 0; i < numItems; ++i) {
                     assert(items[i].typeId == ALLJOYN_STRUCT);
                     qcc::String uniqueName = items[i].v_struct.members[0].v_string.str;
+                    if ((bit->second->GetFeatures().nameTransfer != SessionOpts::ALL_NAMES) && (uniqueName != msg->GetSender())) {
+                        continue;
+                    }
+
                     if (!IsLegalUniqueName(uniqueName.c_str())) {
                         QCC_LogError(ER_FAIL, ("Invalid unique name \"%s\" in ExchangeNames message", uniqueName.c_str()));
                         continue;
@@ -3350,7 +3364,7 @@ void AllJoynObj::ExchangeNamesSignalHandler(const InterfaceDescription::Member*
         map<qcc::StringMapKey, RemoteEndpoint>::const_iterator bit = b2bEndpoints.find(msg->GetRcvEndpointName());
         map<qcc::StringMapKey, RemoteEndpoint>::iterator it = b2bEndpoints.begin();
         while (it != b2bEndpoints.end()) {
-            if ((bit == b2bEndpoints.end()) || (bit->second->GetRemoteGUID() != it->second->GetRemoteGUID())) {
+            if ((it->second->GetFeatures().nameTransfer == SessionOpts::ALL_NAMES) && ((bit == b2bEndpoints.end()) || (bit->second->GetRemoteGUID() != it->second->GetRemoteGUID()))) {
                 QCC_DbgPrintf(("Propagating ExchangeName signal to %s", it->second->GetUniqueName().c_str()));
                 StringMapKey key = it->first;
                 RemoteEndpoint ep = it->second;
@@ -3373,12 +3387,20 @@ void AllJoynObj::ExchangeNamesSignalHandler(const InterfaceDescription::Member*
     }
 }
 
+
 void AllJoynObj::NameChangedSignalHandler(const InterfaceDescription::Member* member, const char* sourcePath, Message& msg)
 {
     size_t numArgs;
     const MsgArg* args;
     msg->GetArgs(numArgs, args);
 
+    AcquireLocks();
+    map<qcc::StringMapKey, RemoteEndpoint>::iterator bit = b2bEndpoints.find(msg->GetRcvEndpointName());
+    if (bit->second->GetFeatures().nameTransfer != SessionOpts::ALL_NAMES) {
+        ReleaseLocks();
+        return;
+    }
+    ReleaseLocks();
     assert(daemonIface);
 
     const qcc::String alias = args[0].v_string.str;
@@ -3456,8 +3478,7 @@ void AllJoynObj::NameChangedSignalHandler(const InterfaceDescription::Member* me
         map<qcc::StringMapKey, RemoteEndpoint>::const_iterator bit = b2bEndpoints.find(msg->GetRcvEndpointName());
         map<qcc::StringMapKey, RemoteEndpoint>::iterator it = b2bEndpoints.begin();
         while (it != b2bEndpoints.end()) {
-            if ((bit == b2bEndpoints.end()) || (bit->second->GetRemoteGUID() != it->second->GetRemoteGUID())) {
-                QCC_DbgPrintf(("Propagating NameChanged signal to %s", it->second->GetUniqueName().c_str()));
+            if ((it->second->GetFeatures().nameTransfer == SessionOpts::ALL_NAMES) && ((bit == b2bEndpoints.end()) || (bit->second->GetRemoteGUID() != it->second->GetRemoteGUID()))) {
                 String key = it->first.c_str();
                 RemoteEndpoint ep = it->second;
                 ReleaseLocks();
@@ -3675,6 +3696,10 @@ void AllJoynObj::NameOwnerChanged(const qcc::String& alias, const qcc::String* o
         AcquireLocks();
         map<qcc::StringMapKey, RemoteEndpoint>::iterator it = b2bEndpoints.begin();
         while (it != b2bEndpoints.end()) {
+            if (it->second->GetFeatures().nameTransfer != SessionOpts::ALL_NAMES) {
+                it++;
+                continue;
+            }
             Message sigMsg(bus);
             MsgArg args[3];
             args[0].Set("s", alias.c_str());
diff --git alljoyn-3.4.3-src-org/alljoyn_core/daemon/SessionlessObj.cc alljoyn-3.4.3-src-patch/alljoyn_core/daemon/SessionlessObj.cc
index 5011c5c..7cce2b2 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/daemon/SessionlessObj.cc
+++ alljoyn-3.4.3-src-patch/alljoyn_core/daemon/SessionlessObj.cc
@@ -90,7 +90,7 @@ SessionlessObj::SessionlessObj(Bus& bus, BusController* busController) :
     curChangeId(0),
     lastAdvChangeId(-1),
     isDiscoveryStarted(false),
-    sessionOpts(SessionOpts::TRAFFIC_MESSAGES, false, SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY),
+    sessionOpts(SessionOpts::TRAFFIC_MESSAGES, false, SessionOpts::PROXIMITY_ANY, TRANSPORT_ANY, SessionOpts::DAEMON_NAMES),
     sessionPort(SESSIONLESS_SESSION_PORT),
     advanceChangeId(false)
 {
diff --git alljoyn-3.4.3-src-org/alljoyn_core/daemon/TCPTransport.cc alljoyn-3.4.3-src-patch/alljoyn_core/daemon/TCPTransport.cc
index 68a8e38..eca3517 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/daemon/TCPTransport.cc
+++ alljoyn-3.4.3-src-patch/alljoyn_core/daemon/TCPTransport.cc
@@ -551,7 +551,7 @@ class _TCPEndpoint : public _RemoteEndpoint {
 
     void SetEpStopping(void)
     {
-        assert(m_epState == EP_STARTING || m_epState == EP_STARTED || m_epState == EP_STOPPING);
+        assert(m_epState == EP_STARTING || m_epState == EP_STARTED || m_epState == EP_STOPPING || m_epState == EP_FAILED);
         m_epState = EP_STOPPING;
     }
 
@@ -2846,6 +2846,7 @@ QStatus TCPTransport::Connect(const char* connectSpec, const SessionOpts& opts,
         tcpEp->GetFeatures().isBusToBus = true;
         tcpEp->GetFeatures().allowRemote = m_bus.GetInternal().AllowRemoteMessages();
         tcpEp->GetFeatures().handlePassing = false;
+        tcpEp->GetFeatures().nameTransfer = opts.nameTransfer;
 
         qcc::String authName;
         qcc::String redirection;
diff --git alljoyn-3.4.3-src-org/alljoyn_core/inc/alljoyn/AllJoynStd.h alljoyn-3.4.3-src-patch/alljoyn_core/inc/alljoyn/AllJoynStd.h
index 784bde1..3f7db4f 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/inc/alljoyn/AllJoynStd.h
+++ alljoyn-3.4.3-src-patch/alljoyn_core/inc/alljoyn/AllJoynStd.h
@@ -32,7 +32,7 @@
 #define QCC_MODULE  "ALLJOYN"
 
 /** Daemon-to-daemon protocol version number */
-#define ALLJOYN_PROTOCOL_VERSION  8
+#define ALLJOYN_PROTOCOL_VERSION  9
 
 namespace ajn {
 
diff --git alljoyn-3.4.3-src-org/alljoyn_core/inc/alljoyn/Message.h alljoyn-3.4.3-src-patch/alljoyn_core/inc/alljoyn/Message.h
index 84edac1..c39d370 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/inc/alljoyn/Message.h
+++ alljoyn-3.4.3-src-patch/alljoyn_core/inc/alljoyn/Message.h
@@ -887,7 +887,7 @@ class _Message {
      *      - #ER_OK if hello method call was sent successfully.
      *      - An error status otherwise
      */
-    QStatus HelloMessage(bool isBusToBus, bool allowRemote);
+    QStatus HelloMessage(bool isBusToBus, bool allowRemote, SessionOpts::NameTransferType nametype);
 
     /**
      * Compose the reply to the hello method call
diff --git alljoyn-3.4.3-src-org/alljoyn_core/inc/alljoyn/Session.h alljoyn-3.4.3-src-patch/alljoyn_core/inc/alljoyn/Session.h
index ec9d934..50bfb2d 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/inc/alljoyn/Session.h
+++ alljoyn-3.4.3-src-patch/alljoyn_core/inc/alljoyn/Session.h
@@ -45,6 +45,7 @@ typedef uint32_t SessionId;
  * SessionOpts contains a set of parameters that define a Session's characteristics.
  */
 class SessionOpts {
+    friend class SessionlessObj;
   public:
     /** Traffic type */
     typedef enum {
@@ -74,6 +75,16 @@ class SessionOpts {
     /** Allowed Transports  */
     TransportMask transports;
 
+    typedef enum {
+        ALL_NAMES = 0x00,       /** < ExchangeNames and NameChanged to be propogated to this session,
+                                      all NameChanged to be sent, all names to be sent as a part of
+                                      initial ExchangeNames */
+        DAEMON_NAMES = 0x01     /** < No ExchangeNames and NameChanged propogation,
+                                      no NameChanged to be sent, only Daemon names to be sent as a part of
+                                      initial ExchangeNames */
+    } NameTransferType;
+    NameTransferType nameTransfer;
+
     /**
      * Construct a SessionOpts with specific parameters.
      *
@@ -122,7 +133,8 @@ class SessionOpts {
         traffic(traffic),
         isMultipoint(isMultipoint),
         proximity(proximity),
-        transports(transports)
+        transports(transports),
+        nameTransfer(ALL_NAMES)
     { }
 
     /**
@@ -132,7 +144,7 @@ class SessionOpts {
      * cpp/Chat/Chat/MainPage.xaml.cpp @n
      * csharp/chat/chat/MainPage.xaml.cs @n
      */
-    SessionOpts() : traffic(TRAFFIC_MESSAGES), isMultipoint(false), proximity(PROXIMITY_ANY), transports(TRANSPORT_ANY) { }
+    SessionOpts() : traffic(TRAFFIC_MESSAGES), isMultipoint(false), proximity(PROXIMITY_ANY), transports(TRANSPORT_ANY), nameTransfer(ALL_NAMES) { }
 
     /**
      * Determine whether this SessionOpts is compatible with the SessionOpts offered by other
@@ -191,6 +203,15 @@ class SessionOpts {
         }
         return false;
     }
+
+  private:
+    SessionOpts(SessionOpts::TrafficType traffic, bool isMultipoint, SessionOpts::Proximity proximity, TransportMask transports, NameTransferType nameType) :
+        traffic(traffic),
+        isMultipoint(isMultipoint),
+        proximity(proximity),
+        transports(transports),
+        nameTransfer(nameType)
+    { }
 };
 
 
diff --git alljoyn-3.4.3-src-org/alljoyn_core/src/EndpointAuth.cc alljoyn-3.4.3-src-patch/alljoyn_core/src/EndpointAuth.cc
index 2313bb2..bf08324 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/src/EndpointAuth.cc
+++ alljoyn-3.4.3-src-patch/alljoyn_core/src/EndpointAuth.cc
@@ -60,8 +60,8 @@ QStatus EndpointAuth::Hello(qcc::String& redirection)
     QStatus status;
     Message hello(bus);
     Message response(bus);
-
-    status = hello->HelloMessage(endpoint->GetFeatures().isBusToBus, endpoint->GetFeatures().allowRemote);
+    nameTransfer = endpoint->GetFeatures().nameTransfer;
+    status = hello->HelloMessage(endpoint->GetFeatures().isBusToBus, endpoint->GetFeatures().allowRemote, endpoint->GetFeatures().nameTransfer);
     if (status != ER_OK) {
         return status;
     }
@@ -228,7 +228,9 @@ QStatus EndpointAuth::WaitHello(qcc::String& authUsed)
             hello->GetArgs(numArgs, args);
             if ((ER_OK == status) && (2 == numArgs) && (ALLJOYN_STRING == args[0].typeId) && (ALLJOYN_UINT32 == args[1].typeId)) {
                 remoteGUID = qcc::GUID128(args[0].v_string.str);
-                remoteProtocolVersion = args[1].v_uint32;
+                uint32_t temp = args[1].v_uint32;
+                remoteProtocolVersion = temp & 0x3FFFFFFF;
+                nameTransfer = temp >> 30;
                 if (remoteGUID == bus.GetInternal().GetGlobalGUID()) {
                     QCC_DbgPrintf(("BusHello was sent by self"));
                     return ER_BUS_SELF_CONNECT;
@@ -477,4 +479,4 @@ ExitEstablish:
     return status;
 }
 
-}
\ No newline at end of file
+}
diff --git alljoyn-3.4.3-src-org/alljoyn_core/src/EndpointAuth.h alljoyn-3.4.3-src-patch/alljoyn_core/src/EndpointAuth.h
index 55cc7f7..da125ea 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/src/EndpointAuth.h
+++ alljoyn-3.4.3-src-patch/alljoyn_core/src/EndpointAuth.h
@@ -119,6 +119,7 @@ class EndpointAuth : public SASLEngine::ExtensionHandler {
      */
     uint32_t GetRemoteProtocolVersion() const { return remoteProtocolVersion; }
 
+    uint32_t GetNameTransfer() const { return nameTransfer; }
   private:
 
     /**
@@ -141,6 +142,7 @@ class EndpointAuth : public SASLEngine::ExtensionHandler {
     qcc::GUID128 remoteGUID;            ///< GUID of the remote side (when applicable)
     uint32_t remoteProtocolVersion;     ///< ALLJOYN protocol version of the remote side
 
+    uint32_t nameTransfer;
     ProtectedAuthListener authListener;  ///< Authentication listener
 
     /* Internal methods */
@@ -151,4 +153,4 @@ class EndpointAuth : public SASLEngine::ExtensionHandler {
 
 }
 
-#endif
\ No newline at end of file
+#endif
diff --git alljoyn-3.4.3-src-org/alljoyn_core/src/Message_Gen.cc alljoyn-3.4.3-src-patch/alljoyn_core/src/Message_Gen.cc
index 7a7e51e..e9c7f97 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/src/Message_Gen.cc
+++ alljoyn-3.4.3-src-patch/alljoyn_core/src/Message_Gen.cc
@@ -1000,7 +1000,7 @@ ExitMarshalMessage:
 }
 
 
-QStatus _Message::HelloMessage(bool isBusToBus, bool allowRemote)
+QStatus _Message::HelloMessage(bool isBusToBus, bool allowRemote, SessionOpts::NameTransferType nameType)
 {
     QStatus status;
     /*
@@ -1016,7 +1016,7 @@ QStatus _Message::HelloMessage(bool isBusToBus, bool allowRemote)
         qcc::String guid = bus->GetInternal().GetGlobalGUID().ToString();
         MsgArg args[2];
         args[0].Set("s", guid.c_str());
-        args[1].Set("u", ALLJOYN_PROTOCOL_VERSION);
+        args[1].Set("u", nameType << 30 | ALLJOYN_PROTOCOL_VERSION);
         status = MarshalMessage("su",
                                 org::alljoyn::Bus::WellKnownName,
                                 MESSAGE_METHOD_CALL,
diff --git alljoyn-3.4.3-src-org/alljoyn_core/src/RemoteEndpoint.cc alljoyn-3.4.3-src-patch/alljoyn_core/src/RemoteEndpoint.cc
index 5538713..bd2966a 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/src/RemoteEndpoint.cc
+++ alljoyn-3.4.3-src-patch/alljoyn_core/src/RemoteEndpoint.cc
@@ -233,6 +233,7 @@ QStatus _RemoteEndpoint::Establish(const qcc::String& authMechanisms, qcc::Strin
             internal->remoteGUID = auth.GetRemoteGUID();
             internal->features.protocolVersion = auth.GetRemoteProtocolVersion();
             internal->features.trusted = (authUsed != "ANONYMOUS");
+            internal->features.nameTransfer = (SessionOpts::NameTransferType)auth.GetNameTransfer();
 
         }
     }
@@ -324,16 +325,14 @@ QStatus _RemoteEndpoint::Start()
 
     /* Register endpoint */
     BusEndpoint bep = BusEndpoint::cast(me);
-    status = router.RegisterEndpoint(bep);
+    status = iodispatch.StartStream(internal->stream, this, this, this);
     if (status == ER_OK) {
-        status = iodispatch.StartStream(internal->stream, this, this, this);
+        status = router.RegisterEndpoint(bep);
+
         if (status != ER_OK) {
             /* Failed to register with iodispatch */
             router.UnregisterEndpoint(this->GetUniqueName(), this->GetEndpointType());
         }
-    } else {
-        /* Failed to register with router */
-        router.UnregisterEndpoint(this->GetUniqueName(), this->GetEndpointType());
     }
     if (status != ER_OK) {
         Invalidate();
diff --git alljoyn-3.4.3-src-org/alljoyn_core/src/RemoteEndpoint.h alljoyn-3.4.3-src-patch/alljoyn_core/src/RemoteEndpoint.h
index e658e40..a56f594 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/src/RemoteEndpoint.h
+++ alljoyn-3.4.3-src-patch/alljoyn_core/src/RemoteEndpoint.h
@@ -82,6 +82,8 @@ class _RemoteEndpoint : public _BusEndpoint, public qcc::ThreadListener, public
         uint32_t processId;        /**< Process id optionally obtained from the remote peer */
 
         bool trusted;              /**< Indicated if the remote client was trusted */
+        SessionOpts::NameTransferType nameTransfer;
+
     };
 
     /**
diff --git alljoyn-3.4.3-src-org/alljoyn_core/src/SessionOpts.cc alljoyn-3.4.3-src-patch/alljoyn_core/src/SessionOpts.cc
index ddee1ba..4d29364 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/src/SessionOpts.cc
+++ alljoyn-3.4.3-src-patch/alljoyn_core/src/SessionOpts.cc
@@ -38,6 +38,7 @@ namespace ajn {
 #define SESSIONOPTS_ISMULTICAST "multi"
 #define SESSIONOPTS_PROXIMITY   "prox"
 #define SESSIONOPTS_TRANSPORTS  "trans"
+#define SESSIONOPTS_NAMETRANSFER  "names"
 
 bool SessionOpts::IsCompatible(const SessionOpts& other) const
 {
@@ -82,6 +83,8 @@ QStatus GetSessionOpts(const MsgArg& msgArg, SessionOpts& opts)
                 val->Get("y", &opts.proximity);
             } else if (::strcmp(SESSIONOPTS_TRANSPORTS, key) == 0) {
                 val->Get("q", &opts.transports);
+            } else if (::strcmp(SESSIONOPTS_NAMETRANSFER, key) == 0) {
+                val->Get("y", &opts.nameTransfer);
             }
         }
     }
@@ -94,12 +97,14 @@ void SetSessionOpts(const SessionOpts& opts, MsgArg& msgArg)
     MsgArg isMultiArg("b", opts.isMultipoint);
     MsgArg proximityArg("y", opts.proximity);
     MsgArg transportsArg("q", opts.transports);
+    MsgArg nameTransferArg("y", opts.nameTransfer);
 
-    MsgArg entries[4];
+    MsgArg entries[5];
     entries[0].Set("{sv}", SESSIONOPTS_TRAFFIC, &trafficArg);
     entries[1].Set("{sv}", SESSIONOPTS_ISMULTICAST, &isMultiArg);
     entries[2].Set("{sv}", SESSIONOPTS_PROXIMITY, &proximityArg);
     entries[3].Set("{sv}", SESSIONOPTS_TRANSPORTS, &transportsArg);
+    entries[4].Set("{sv}", SESSIONOPTS_NAMETRANSFER, &nameTransferArg);
     QStatus status = msgArg.Set("a{sv}", ArraySize(entries), entries);
     if (status == ER_OK) {
         msgArg.Stabilize();
