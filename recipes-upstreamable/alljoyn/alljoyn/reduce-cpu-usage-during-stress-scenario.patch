diff --git alljoyn-3.4.3-src-org/common/os/posix/Timer.cc alljoyn-3.4.3-src-patch/common/os/posix/Timer.cc
index 53359fd..1ced2df 100644
--- alljoyn-3.4.3-src-org/common/os/posix/Timer.cc
+++ alljoyn-3.4.3-src-patch/common/os/posix/Timer.cc
@@ -33,6 +33,7 @@
 #define FALLBEHIND_WARNING_MS   500
 
 #define TIMER_IS_DEAD_ALERTCODE  1
+#define FORCEREMOVEALARM_ALERTCODE  2
 
 using namespace std;
 using namespace qcc;
@@ -253,9 +254,7 @@ QStatus Timer::AddAlarm(const Alarm& alarm)
             /* Reset alert status */
             if (ER_ALERTED_THREAD == status1) {
                 thread->GetStopEvent().ResetEvent();
-                if (thread->GetAlertCode() == TIMER_IS_DEAD_ALERTCODE) {
-
-
+                if (thread->GetAlertCode() == FORCEREMOVEALARM_ALERTCODE) {
                     lock.Unlock(MUTEX_CONTEXT);
                     return ER_TIMER_EXITING;
                 }
@@ -396,7 +395,7 @@ bool Timer::ForceRemoveAlarm(const Alarm& alarm, bool blockIfTriggered)
                 }
                 const Alarm* curAlarm = timerThreads[i]->GetCurrentAlarm();
                 while (isRunning && curAlarm && (*curAlarm == alarm)) {
-                    timerThreads[i]->Alert(TIMER_IS_DEAD_ALERTCODE);
+                    timerThreads[i]->Alert(FORCEREMOVEALARM_ALERTCODE);
                     lock.Unlock();
                     qcc::Sleep(2);
                     lock.Lock();
@@ -795,6 +794,13 @@ ThreadReturn STDCALL TimerThread::Run(void* arg)
                         timer->reentrancyLock.Unlock();
                     }
                     timer->lock.Lock();
+                    /* If ForceRemoveAlarm has been called for this alarm, we need to reset the alert code.
+                     * Note that this must be atomic with setting the currentAlarm to NULL.
+                     */
+                    Thread* thread = Thread::GetThread();
+                    if (thread->GetAlertCode() == FORCEREMOVEALARM_ALERTCODE) {
+                        thread->ResetAlertCode();
+                    }
                     currentAlarm = NULL;
 
                     if (0 != top->periodMs) {
diff --git alljoyn-3.4.3-src-org/common/os/windows/Timer.cc alljoyn-3.4.3-src-patch/common/os/windows/Timer.cc
index cfd5c39..c3c57bd 100644
--- alljoyn-3.4.3-src-org/common/os/windows/Timer.cc
+++ alljoyn-3.4.3-src-patch/common/os/windows/Timer.cc
@@ -33,6 +33,7 @@
 #define FALLBEHIND_WARNING_MS   500
 
 #define TIMER_IS_DEAD_ALERTCODE  1
+#define FORCEREMOVEALARM_ALERTCODE  2
 
 using namespace std;
 using namespace qcc;
@@ -253,9 +254,7 @@ QStatus Timer::AddAlarm(const Alarm& alarm)
             /* Reset alert status */
             if (ER_ALERTED_THREAD == status1) {
                 thread->GetStopEvent().ResetEvent();
-                if (thread->GetAlertCode() == TIMER_IS_DEAD_ALERTCODE) {
-
-
+                if (thread->GetAlertCode() == FORCEREMOVEALARM_ALERTCODE) {
                     lock.Unlock(MUTEX_CONTEXT);
                     return ER_TIMER_EXITING;
                 }
@@ -393,7 +392,7 @@ bool Timer::ForceRemoveAlarm(const Alarm& alarm, bool blockIfTriggered)
                 }
                 const Alarm* curAlarm = timerThreads[i]->GetCurrentAlarm();
                 while (isRunning && curAlarm && (*curAlarm == alarm)) {
-                    timerThreads[i]->Alert(TIMER_IS_DEAD_ALERTCODE);
+                    timerThreads[i]->Alert(FORCEREMOVEALARM_ALERTCODE);
                     lock.Unlock();
                     qcc::Sleep(2);
                     lock.Lock();
@@ -790,6 +789,14 @@ ThreadReturn STDCALL TimerThread::Run(void* arg)
                         timer->reentrancyLock.Unlock();
                     }
                     timer->lock.Lock();
+                    /* If ForceRemoveAlarm has been called for this alarm, we need to reset the alert code.
+                     * Note that this must be atomic with setting the currentAlarm to NULL.
+                     */
+                    Thread* thread = Thread::GetThread();
+                    if (thread->GetAlertCode() == FORCEREMOVEALARM_ALERTCODE) {
+                        thread->ResetAlertCode();
+                    }
+
                     currentAlarm = NULL;
 
                     if (0 != top->periodMs) {
diff --git alljoyn-3.4.3-src-org/alljoyn_core/daemon/TCPTransport.cc alljoyn-3.4.3-src-patch/alljoyn_core/daemon/TCPTransport.cc
index 68a8e38..e7e696b 100644
--- alljoyn-3.4.3-src-org/alljoyn_core/daemon/TCPTransport.cc
+++ alljoyn-3.4.3-src-patch/alljoyn_core/daemon/TCPTransport.cc
@@ -1490,6 +1490,9 @@ void TCPTransport::ManageEndpoints(Timespec authTimeout, Timespec sessionSetupTi
          */
         if (endpointState == _TCPEndpoint::EP_FAILED) {
             m_endpointList.erase(i);
+            m_endpointListLock.Unlock(MUTEX_CONTEXT);
+            ep->AuthJoin();
+            m_endpointListLock.Lock(MUTEX_CONTEXT);
             i = m_endpointList.upper_bound(ep);
             continue;
         }
@@ -1509,6 +1512,7 @@ void TCPTransport::ManageEndpoints(Timespec authTimeout, Timespec sessionSetupTi
         if (endpointState == _TCPEndpoint::EP_STOPPING) {
             m_endpointList.erase(i);
             m_endpointListLock.Unlock(MUTEX_CONTEXT);
+            ep->AuthJoin();
             ep->Join();
             m_endpointListLock.Lock(MUTEX_CONTEXT);
             i = m_endpointList.upper_bound(ep);
