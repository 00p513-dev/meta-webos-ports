Index: /trunk/boost/lexical_cast.hpp
===================================================================
--- /trunk/boost/lexical_cast.hpp	(revision 84965)
+++ /trunk/boost/lexical_cast.hpp	(revision 85072)
@@ -880,4 +880,13 @@
 #ifndef BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS
             BOOST_STATIC_ASSERT(!std::numeric_limits<T>::is_signed);
+
+            // GCC when used with flag -std=c++0x may not have std::numeric_limits
+            // specializations for __int128 and unsigned __int128 types.
+            // Try compilation with -std=gnu++0x or -std=gnu++11.
+            //
+            // http://gcc.gnu.org/bugzilla/show_bug.cgi?id=40856
+            BOOST_STATIC_ASSERT_MSG(std::numeric_limits<T>::is_specialized,
+                "std::numeric_limits are not specialized for integral type passed to boost::lexical_cast"
+            );
 #endif
             CharT const czero = lcast_char_constants<CharT>::zero;
Index: /trunk/libs/conversion/test/lexical_cast_integral_types_test.cpp
===================================================================
--- /trunk/libs/conversion/test/lexical_cast_integral_types_test.cpp	(revision 84965)
+++ /trunk/libs/conversion/test/lexical_cast_integral_types_test.cpp	(revision 85072)
@@ -559,12 +559,31 @@
 
 #ifdef BOOST_LCAST_HAS_INT128
+
+template <bool Specialized, class T>
+struct test_if_specialized {
+    static void test() {}
+};
+
+template <class T>
+struct test_if_specialized<true, T> {
+    static void test() {
+        test_conversion_from_to_integral_minimal<T>();
+    }
+};
+
 void test_conversion_from_to_int128()
 {
-    test_conversion_from_to_integral_minimal<boost::int128_type>();
+    test_if_specialized<
+        std::numeric_limits<boost::int128_type>::is_specialized, 
+        boost::int128_type
+    >::test();
 }
 
 void test_conversion_from_to_uint128()
 {
-    test_conversion_from_to_integral_minimal<boost::uint128_type>();
+    test_if_specialized<
+        std::numeric_limits<boost::int128_type>::is_specialized, 
+        boost::uint128_type
+    >::test();
 }
 #endif
