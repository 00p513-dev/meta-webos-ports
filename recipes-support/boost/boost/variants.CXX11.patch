https://svn.boost.org/trac/boost/ticket/8772

Index: a/boost/variant/variant.hpp
===================================================================
--- a/boost/variant/variant.hpp	(revision 85079)
+++ a/boost/variant/variant.hpp	(revision 85080)
@@ -1981,5 +1981,5 @@
     private: // helpers, for internal visitor interface (below)
 
-        template <typename RhsT, typename B1, typename B2>
+        template <typename RhsT, typename B2>
         void assign_impl(
               RhsT& rhs_content
Index: a/libs/variant/test/rvalue_test.cpp
===================================================================
--- a/libs/variant/test/rvalue_test.cpp	(revision 85079)
+++ a/libs/variant/test/rvalue_test.cpp	(revision 85080)
@@ -197,4 +197,19 @@
 #endif
 
+struct nothrow_copyable_throw_movable {
+    nothrow_copyable_throw_movable(){}
+    nothrow_copyable_throw_movable(const nothrow_copyable_throw_movable&) BOOST_NOEXCEPT {}
+#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
+    nothrow_copyable_throw_movable(nothrow_copyable_throw_movable&&) BOOST_NOEXCEPT_IF(false) {}
+#endif
+};
+
+// This test is created to cover the following situation:
+// https://svn.boost.org/trac/boost/ticket/8772
+void run_tricky_compilation_test()
+{
+    boost::variant<int, nothrow_copyable_throw_movable> v;
+    v = nothrow_copyable_throw_movable();
+}
 
 int test_main(int , char* [])
@@ -204,4 +219,5 @@
    run_move_only();
    run_moves_are_noexcept();
+   run_tricky_compilation_test();
    return 0;
 }
