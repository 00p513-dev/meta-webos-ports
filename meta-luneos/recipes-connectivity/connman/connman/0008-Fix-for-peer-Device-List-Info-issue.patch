From f439750a12a070a76b3cceedde5b3f1a4c71c334 Mon Sep 17 00:00:00 2001
From: "piyush10.asalmol" <piyush10.asalmol@lge.com>
Date: Tue, 8 Nov 2022 17:59:24 +0530
Subject: [PATCH] Fix for peer Device List Info issue

:Release Notes:
Fix for peer device list info issue

:Detailed Notes:
Fix for peer device list info issue

:Testing Performed:
Tested locally

:QA Notes:
NA

:Issues Addressed:
[WRO-15182] [OSE-RPi4] : peer device info is not listing in terminal

Change-Id: Ibaac4172dd71007babf9165c7ebb122d27684bdd
Reviewed-on: http://gpro.lge.com/c/webosose/connman-webos/+/338999
Reviewed-by: Commit Msg Checker <commit_msg@lge.com>
Reviewed-by: <muralidhar.n@lge.com>
Tested-by: <muralidhar.n@lge.com>
Upstream-Status: Pending
---
 gsupplicant/supplicant.c | 102 +++++++++++++++++++++++++++++++++++++--
 1 file changed, 99 insertions(+), 3 deletions(-)

diff --git a/gsupplicant/supplicant.c b/gsupplicant/supplicant.c
index 416e5404..cd57b664 100644
--- a/gsupplicant/supplicant.c
+++ b/gsupplicant/supplicant.c
@@ -2511,8 +2511,7 @@ static void bss_compute_security(struct g_supplicant_bss *bss)
 	if (bss->keymgmt &
 			(G_SUPPLICANT_KEYMGMT_WPA_PSK |
 				G_SUPPLICANT_KEYMGMT_WPA_FT_PSK |
-				G_SUPPLICANT_KEYMGMT_WPA_PSK_256 |
-				G_SUPPLICANT_KEYMGMT_SAE))
+				G_SUPPLICANT_KEYMGMT_WPA_PSK_256))
 		bss->psk = TRUE;
 
 	if (bss->ieee8021x)
@@ -3117,6 +3116,12 @@ static GSupplicantInterface *interface_alloc(const char *path)
 	interface->bss_mapping = g_hash_table_new_full(g_str_hash, g_str_equal,
 								NULL, NULL);
 
+	interface->p2p_peer_path_to_network = g_hash_table_new_full(g_str_hash, g_str_equal,
+								NULL, NULL);
+
+	interface->p2p_group_path_to_group = g_hash_table_new_full(g_str_hash, g_str_equal,
+								NULL, NULL);
+
 	g_hash_table_replace(interface_table, interface->path, interface);
 
 	return interface;
@@ -5559,7 +5564,7 @@ static void extract_peer_with_ip(const char *path, DBusMessageIter *iter, connma
 
 static void signal_group_peer_joined(const char *path, DBusMessageIter *iter)
 {
-	const char *peer_path = NULL;
+	//const char *peer_path = NULL;
 	extract_peer_with_ip(path, iter, TRUE, false);
 }
 static gboolean peer_joined_with_ip(gpointer data)
@@ -8682,6 +8687,46 @@ static void interface_p2p_reject_params(DBusMessageIter *iter, void *user_data)
 	dbus_message_iter_append_basic(iter, DBUS_TYPE_OBJECT_PATH,
 							&data->peer->path);
 }
+
+int g_supplicant_interface_p2p_reject(GSupplicantInterface *interface,
+					GSupplicantPeerParams *peer_params,
+					GSupplicantInterfaceCallback callback,
+					void *user_data)
+{
+	struct interface_reject_data* data;
+	int ret;
+
+	SUPPLICANT_DBG("");
+
+	if (!interface || !peer_params || !peer_params->path)
+		return -EINVAL;
+
+	if (!interface->p2p_support)
+		return -ENOTSUP;
+
+	data = dbus_malloc0(sizeof(*data));
+	if (!data)
+		return -ENOMEM;
+
+	data->interface = interface;
+	data->path = g_strdup(interface->path);
+	data->peer = peer_params;
+	data->callback = callback;
+	data->user_data = user_data;
+
+	ret = supplicant_dbus_method_call(interface->path,
+			SUPPLICANT_INTERFACE ".Interface.P2PDevice", "RejectPeer",
+			interface_p2p_reject_params, interface_p2p_reject_peer_result, data, NULL);
+
+	if (ret < 0) {
+		g_free(data->path);
+		dbus_free(data);
+		return ret;
+	}
+
+	return -EINPROGRESS;
+}
+
 struct interface_p2p_sd_data {
 	GSupplicantInterface *interface;
 	GSupplicantInterfaceCallback callback;
@@ -8812,6 +8857,42 @@ static void interface_p2p_sd_cancel_request_params(DBusMessageIter *iter, void *
 		dbus_message_iter_append_basic(iter, DBUS_TYPE_UINT64, request_id);
 	}
 }
+
+int g_supplicant_interface_p2p_sd_cancel_request(GSupplicantInterface *interface,
+				dbus_uint64_t request_id,
+				GSupplicantInterfaceCallback callback,
+				void *user_data)
+{
+	struct interface_p2p_sd_data *data;
+	int ret;
+
+	if (interface == NULL)
+		return -EINVAL;
+
+	if (system_available == FALSE)
+		return -EFAULT;
+
+	data = dbus_malloc0(sizeof(*data));
+	if (data == NULL)
+		return -ENOMEM;
+
+	data->interface = interface;
+	data->callback = callback;
+	data->user_data = user_data;
+	data->p2p_sd_params = (void*)&request_id;
+
+	ret = supplicant_dbus_method_call(interface->path,
+									  SUPPLICANT_INTERFACE ".Interface.P2PDevice", "ServiceDiscoveryCancelRequest",
+									  interface_p2p_sd_cancel_request_params, interface_p2p_sd_cancel_request_result, data, NULL);
+
+	if (ret < 0) {
+		dbus_free(data);
+		return ret;
+	}
+
+	return -EINPROGRESS;
+}
+
 struct p2p_service_data {
 	bool registration;
 	GSupplicantInterface *interface;
@@ -9979,6 +10060,12 @@ int g_supplicant_register(const GSupplicantCallbacks *callbacks)
 								NULL, NULL);
 	config_file_table = g_hash_table_new_full(g_str_hash, g_str_equal,
 								g_free, g_free);
+	intf_addr_mapping = g_hash_table_new_full(g_str_hash, g_str_equal,
+								g_free, NULL);
+	dev_addr_mapping = g_hash_table_new_full(g_str_hash, g_str_equal,
+								g_free, g_free);
+	p2p_peer_table = g_hash_table_new_full(g_str_hash, g_str_equal,
+								g_free, NULL);
 
 	supplicant_dbus_setup(connection);
 
@@ -10082,6 +10169,15 @@ void g_supplicant_unregister(const GSupplicantCallbacks *callbacks)
 		connection = NULL;
 	}
 
+	if (intf_addr_mapping){
+		g_hash_table_destroy(intf_addr_mapping);
+		intf_addr_mapping = NULL;
+	}
+	if (p2p_peer_table != NULL){
+		g_hash_table_destroy(p2p_peer_table);
+		p2p_peer_table = NULL;
+	}
+
 	callbacks_pointer = NULL;
 	eap_methods = 0;
 }
